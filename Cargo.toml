[workspace]
members = ["catalyst-app", "catalyst-proxy", "catalyst-rpc", "catalyst-core"]
resolver = "2"

[workspace.package]
version      = "0.4.3"
edition      = "2024"
rust-version = "1.87.0"
license      = "Apache-2.0"
homepage     = "https://catalyst-ide.dev"
authors      = ["Dongdong Zhou <dzhou121@gmail.com>"]

[patch.crates-io]
# Temporarily patch lsp-types with a version that adds message-type debug
# lsp-types = { git = "https://github.com/lapce/lsp-types", rev = "feaa1e2ec80975c9dadd400a238ceacf071058e6" }
regalloc2 = { rev = "5d79e12d0a93b10fc181f4da409b4671dd365228", git = "https://github.com/bytecodealliance/regalloc2" }

# cargo vendor issue: https://github.com/rust-lang/cargo/issues/10310
# dpi comes from winit (source) and muda (crate)
dpi = { git = "https://github.com/rust-windowing/winit", rev = "ee245c569d65fdeacf705ee5eedb564508d10ebe" }

[profile.release-lto]
inherits      = "release"
lto           = true
codegen-units = 1
strip = true
panic = "abort"

# Optimized release profile for speed
[profile.release-speed]
inherits = "release"
lto = "thin"
codegen-units = 1
panic = "abort"
opt-level = 3

# Optimized release profile for size  
[profile.release-minimal]
inherits = "release"
lto = "thin"
codegen-units = 1
panic = "abort"
strip = "symbols"
opt-level = "s"

# A profile which compiles all (non-workspace) dependencies in release mode
# but Catalyst code in dev mode. This gives a good debugging experience for your
# code and fast performance of other people's code. After the initial
# build subsequent ones are as fast as dev mode builds.
# See https://doc.rust-lang.org/cargo/reference/profiles.html
# To use this profile:
#   cargo build --profile fastdev
#   cargo run --profile fastdev --bin catalyst
[profile.fastdev.package."*"]
opt-level = 3

[profile.fastdev]
inherits = "dev"

# Minimal development profile for fastest compilation
[profile.fastdev-minimal]
inherits = "dev"
opt-level = 1
debug = 0
codegen-units = 16
incremental = true
strip = "debuginfo"

# Compile heavy dependencies in release mode even during development
[profile.fastdev-minimal.package."*"]
opt-level = 2
debug = false

# Optimize specific heavy packages in dev builds
[profile.dev.package]
regex = { opt-level = 3 }
serde = { opt-level = 3 }
serde_json = { opt-level = 3 }
floem = { opt-level = 3 }

# Test profile optimization
[profile.test]
opt-level = 1
debug = 0
incremental = true